import{_ as e,o as l,c as a,e as i}from"./app-520BETNP.js";const r={},t=i('<h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1.概述</h2><p>Helm是k8s的包管理工具，类似Linux系统常用的 apt、yum等包管理工具。使用helm可以简化k8s应用部署</p><h2 id="_2-基本概念" tabindex="-1"><a class="header-anchor" href="#_2-基本概念" aria-hidden="true">#</a> 2.基本概念</h2><ul><li>Chart：一个 Helm 包，其中包含了运行一个应用所需要的镜像、依赖和资源定义等，还可能包含 Kubernetes 集群中的服务定义，类似 Homebrew 中的 formula、APT 的 dpkg 或者 Yum 的 rpm 文件。</li><li>Release：在 Kubernetes 集群上运行的 Chart 的一个实例。在同一个集群上，一个 Chart 可以安装很多次。每次安装都会创建一个新的 release。例如一个 MySQL Chart，如果想在服务器上运行两个数据库，就可以把这个 Chart 安装两次。每次安装都会生成自己的 Release，会有自己的 Release 名称。</li><li>Repository：用于发布和存储 Chart 的存储库。</li></ul><h2 id="_3-架构" tabindex="-1"><a class="header-anchor" href="#_3-架构" aria-hidden="true">#</a> 3.架构</h2><p><img src="https://fastly.jsdelivr.net/gh/JaikenWong/Drawing-Bed@main/images/1712156255591image.jpg" alt="1712156255591image.jpg"></p><p>Chart Install 过程：</p><ol><li>Helm从指定的目录或者tgz文件中解析出Chart结构信息</li><li>Helm将指定的Chart结构和Values信息通过gRPC传递给Tiller</li><li>Tiller根据Chart和Values生成一个Release</li><li>Tiller将Release发送给Kubernetes运行。</li></ol><p>Chart Update过程：</p><ol><li>Helm从指定的目录或者tgz文件中解析出Chart结构信息</li><li>Helm将要更新的Release的名称和Chart结构，Values信息传递给Tiller</li><li>Tiller生成Release并更新指定名称的Release的History</li><li>Tiller将Release发送给Kubernetes运行</li></ol>',10),s=[t];function h(n,o){return l(),a("div",null,s)}const d=e(r,[["render",h],["__file","Helmjichugainian.html.vue"]]);export{d as default};
