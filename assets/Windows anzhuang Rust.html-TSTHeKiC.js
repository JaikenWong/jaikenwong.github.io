import{_ as i,r as d,o,c as l,a as e,b as n,d as t,e as c}from"./app-520BETNP.js";const a={},r=e("code",null,"%USERPROFILE%",-1),u={href:"https://link.juejin.cn/?target=https%3A%2F%2Fforge.rust-lang.org%2Finfra%2Fother-installation-methods.html",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"rustup-init.exe",-1),p=e("code",null,"x86_64-pc-windows-gnu",-1),g=e("code",null,"x86_64-pc-windows-msvc",-1),_=e("code",null,"windows-gnu",-1),m=e("code",null,"windows-msvc",-1),h=e("code",null,"rustup-init.exe",-1),b=c(`<p><img src="https://fastly.jsdelivr.net/gh/JaikenWong/Drawing-Bed@main/images/1712140772343image.jpg" alt="1712140772343image.jpg"></p><p>提示信息劝导安装 Visual Studio。说 Windows linker 和库是必须的，而 Visual Studio 可以提供这些东西。输入选项3，不装。</p><p><img src="https://fastly.jsdelivr.net/gh/JaikenWong/Drawing-Bed@main/images/1712140669393image.jpg" alt=""></p><p>这一屏有一些有用的信息，</p><ul><li>Rust 编译工具默认安装在 <code>%USERPROFILE%\\.rustup</code> 目录，可以通过 <code>RUSTUP_HOME</code> 环境变量自定义</li><li>包管理器 Cargo 的默认目录是<code>%USERPROFILE%\\.cargo</code>，可以通过 <code>CARGO_HOME</code> 环境变量自定义</li><li><code>%CARGO_HOME%\\bin</code> 路径需要添加到 <code>PATH</code> 环境变量中。可见这里面将会安装一些可执行程序</li></ul><p>选择选项3，先终止安装。在重新安装之前，先设置环境变量，以自定义安装目录。我打算将 Rust 安装到 <code>D:\\devel\\rust</code> 目录下。打开 Windows 命令行（<code>cmd.exe</code>），在命令行中设置环境变量，然后启动 <code>rustup-init.exe</code>。假设<code>rustup-init.exe</code>在安装目录下，依次执行以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cd D:\\devel\\rust
set RUSTUP_HOME=%CD%\\.rustup
set CARGO_HOME=%CD%\\.cargo
.\\rustup-init.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>rustup-init.exe</code>启动后，重复前面的步骤，来到最后一屏时，输入选项2，自定义安装选项。主要是将 “default host triple” 设为<code>x86_64-pc-windows-gnu</code>，并且<strong>不</strong>修改系统 <code>PATH</code> 环境变量，详细步骤如下图。</p><p><img src="https://fastly.jsdelivr.net/gh/JaikenWong/Drawing-Bed@main/images/1712141055887image.jpg" alt="1712141055887image.jpg"></p><p>设定好安装选项后，输入选项1开始安装。安装过程中<code>rustup-init.exe</code>将会在线下载所需的包。耐心等待安装完成。 在安装目录（<code>D:\\devel\\rust</code>）下创建一个批处理脚本，比如<code>rust_cmdline.bat</code>，内容如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@echo off

set PATH=%windir%\\System32

set RUSTUP_HOME=D:\\devel\\rust\\.rustup
set CARGO_HOME=D:\\devel\\rust\\.cargo
set PATH=%CARGO_HOME%\\bin;%PATH%

start cmd.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>双击这个脚本将会启动 Windows 命令行，并且已设置了必要的环境变量。试着在命令行中执行一下 <code>rustc</code> 和 <code>cargo</code>命令，看 Rust 是否正确安装，例如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>D:\\devel\\rust&gt;cargo --version
cargo 1.68.2 (6feb7c9cf 2023-03-26)

D:\\devel\\rust&gt;rustc --version
rustc 1.68.2 (9eb3afe9e 2023-03-27)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装-vs-code" tabindex="-1"><a class="header-anchor" href="#安装-vs-code" aria-hidden="true">#</a> 安装 VS Code</h3>`,14),x=e("code",null,"data",-1),f={href:"https://link.juejin.cn/?target=https%3A%2F%2Fcode.visualstudio.com%2Fdocs%2Feditor%2Fportable",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"data",-1),w=e("code",null,"tmp",-1),C=e("ul",null,[e("li",null,"rust-analyzer。官方扩展，提供 Rust 语言支持"),e("li",null,"Even Better TOML。提供 TOML 语法高亮和格式化"),e("li",null,"CodeLLDB。Rust 文档声称，仅 Linux/macOS 环境下才需要，而 Windows 下则不需此扩展。我发现实际并非如此，如果不安装此扩展，调试 Rust 程序时不会在断点暂停"),e("li",null,"C/C++ Extension Pack。微软官方 C/C++ 扩展包")],-1),E={href:"https://link.juejin.cn/?target=https%3A%2F%2Fcode.visualstudio.com%2Fdocs%2Flanguages%2Frust",target:"_blank",rel:"noopener noreferrer"},O=e("code",null,"rustup docs",-1);function S(F,k){const s=d("ExternalLinkIcon");return o(),l("div",null,[e("p",null,[n("Rust 本来提供了完整的 Windows 安装程序，但是要求同时安装 Visual C++ 编译工具，此外我怀疑它会修改系统（注册表、环境变量什么的），或者在用户目录（"),r,n("）下存放文件，这是我所不喜欢的。不管是开发工具还是应用软件，我喜欢“便携安装”方式（Portable installation），把程序、数据和文档等等集中放在一个文件夹里，可以随意复制、移动、备份。 的确可以手工安装（"),e("a",u,[n("forge.rust-lang.org/infra/other…"),t(s)]),n(" ），文档非常简略，没有给出具体步骤。所幸，事实表明，安装过程相当直观、顺利。我是昨天晚上安装的，此刻开始写这篇笔记已经是一天以后。 Rust 安装工具是 "),v,n("，从上面的链接页面可以下载。64 位 Windows 下有"),p,n("和"),g,n("两个版本。根据交叉编译工具的 Triplet 命名惯例，这两个版本的目标 ABI 分别是 GNU（"),_,n("）和 Windows（"),m,n("）。我选 GNU。 怀着对未知事物的忐忑心情，双击运行 "),h,n("，发现这是一个命令行工具。")]),b,e("p",null,[n("下载 VS Code zip 压缩包，解压即可。在解压目录中创建一个 "),x,n(" 文件夹，这样 VS Code 便成为 "),e("a",f,[n("Portable 模式"),t(s)]),n("。另外，在"),R,n(" 文件夹中创建一个"),w,n(" 文件夹，作为 VS Code 临时目录。 安装以下扩展：")]),C,e("p",null,[n("要在正确的 Rust 环境下启动 VS Code。例如，在前面创建的命令行中启动 VS Code，确保相关环境变量能被 VS Code 所继承。 跟着这篇教程把 Hello World 跑起来："),e("a",E,[n("code.visualstudio.com/docs/langua…"),t(s)]),n(" 执行"),O,n("命令，将会在浏览器中打开 Rust 文档。找到 “the book”，跟着学起来。")])])}const A=i(a,[["render",S],["__file","Windows anzhuang Rust.html.vue"]]);export{A as default};
