import{_ as n,o as s,c as a,e}from"./app-520BETNP.js";const t={},p=e(`<h2 id="_1-搭建github-图床" tabindex="-1"><a class="header-anchor" href="#_1-搭建github-图床" aria-hidden="true">#</a> 1. 搭建Github 图床</h2><h3 id="_1-1-创建或者选择一个public-仓库" tabindex="-1"><a class="header-anchor" href="#_1-1-创建或者选择一个public-仓库" aria-hidden="true">#</a> 1.1. 创建或者选择一个Public 仓库</h3><p><img src="https://cdn.jsdelivr.net/gh/JaikenWong/Drawing-Bed/images/2024-04-06/95e86f62-f371-11ee-93c8-02d634b58295.png" alt="image-20240406012606606"></p><h3 id="_1-2-获取github-token" tabindex="-1"><a class="header-anchor" href="#_1-2-获取github-token" aria-hidden="true">#</a> 1.2. 获取Github Token</h3><p><img src="https://cdn.jsdelivr.net/gh/JaikenWong/Drawing-Bed/images/2024-04-06/bda4721c-f371-11ee-97fb-02d634b58295.png" alt="image-20240406012713266"></p><p><img src="https://cdn.jsdelivr.net/gh/JaikenWong/Drawing-Bed/images/2024-04-06/4b8e512e-f372-11ee-a37b-02d634b58295.png" alt="image-20240406013111358"></p><h2 id="_2-typora-结合图床" tabindex="-1"><a class="header-anchor" href="#_2-typora-结合图床" aria-hidden="true">#</a> 2. Typora 结合图床</h2><blockquote><p>当Typora需要使用这个图床的时候，Picgo 是很好的解决方案，但是还可以通过其他的方式来进行上传，比如python 脚本。</p></blockquote><h3 id="_2-1-upload-img-py" tabindex="-1"><a class="header-anchor" href="#_2-1-upload-img-py" aria-hidden="true">#</a> 2.1. upload-img.py</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> requests
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> json
<span class="token keyword">import</span> uuid
<span class="token keyword">import</span> datetime
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys

ext <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

<span class="token comment"># 判断是不是 url</span>
<span class="token keyword">def</span> <span class="token function">is_valid_url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>result<span class="token punctuation">.</span>scheme<span class="token punctuation">,</span> result<span class="token punctuation">.</span>netloc<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token comment"># 从文件夹下 读取文件</span>
<span class="token keyword">def</span> <span class="token function">read_dir</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> ext
    <span class="token keyword">if</span> is_valid_url<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 如果是网络图片</span>
        <span class="token comment"># 图片保存在内存</span>
        ext <span class="token operator">=</span> <span class="token string">&quot;.jpg&quot;</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
        <span class="token comment"># 得到图片的base64编码</span>
        <span class="token keyword">return</span> file_base64<span class="token punctuation">(</span>response<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 判断是否是文件夹，不是文件夹才打开</span>
        ext <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 文件后缀</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span> <span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment"># rb 二进制 读取</span>
            fdata_tmp <span class="token operator">=</span> file_base64<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> fdata_tmp


<span class="token comment"># 将文件转换为base64编码，github上传文件必须将文件以base64格式上传</span>
<span class="token keyword">def</span> <span class="token function">file_base64</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data_b64 <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data_b64


<span class="token comment"># 上传文件</span>
<span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span>file_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> ext
    file_name <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> ext  <span class="token comment"># 文件名 随机生成</span>
    <span class="token comment"># url = &quot;https://api.github.com/repos/[user]/[repo]/contents/[path]/&quot;+file_name  # 用户名、库名、路径</span>
    <span class="token comment"># headers = {&quot;Authorization&quot;: &quot;Bearer &quot; + token}</span>

    <span class="token comment"># ghp_****</span>
    <span class="token comment"># JaikenWong/Drawing-Bed</span>
    <span class="token comment"># images</span>
    <span class="token comment"># main</span>
    token <span class="token operator">=</span> <span class="token string">&quot;ghp_******&quot;</span>  <span class="token comment">## github -&gt; settings -&gt; Developer Settings -&gt; Personal access tokens -&gt; Tokens(classic) -&gt; Generate new token (classic)</span>
    curr_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>
    path <span class="token operator">=</span> curr_time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%Y-%m-%d&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 日期文件夹</span>
    url <span class="token operator">=</span> <span class="token string">&quot;https://api.github.com/repos/JaikenWong/Drawing-Bed/contents/images/&quot;</span> <span class="token operator">+</span> path <span class="token operator">+</span> <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> file_name  <span class="token comment"># 用户名、库名、路径</span>
    headers <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Bearer &quot;</span> <span class="token operator">+</span> token
    <span class="token punctuation">}</span>
    content <span class="token operator">=</span> file_data
    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;zj upload pictures&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;content&quot;</span><span class="token punctuation">:</span> content<span class="token punctuation">}</span>
    data <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    req <span class="token operator">=</span> requests<span class="token punctuation">.</span>put<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    req<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">&quot;utf-8&quot;</span>
    re_data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;https://cdn.jsdelivr.net/gh/JaikenWong/Drawing-Bed@main/images/&quot;</span> <span class="token operator">+</span> path <span class="token operator">+</span>
          <span class="token string">&quot;/&quot;</span> <span class="token operator">+</span> file_name<span class="token punctuation">)</span>
    <span class="token comment"># 这个打印会回显给Typora cdn.jsdelivr.net 是免费的加速cdn</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    args <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> img_path <span class="token keyword">in</span> args<span class="token punctuation">:</span>
        <span class="token comment"># 从文件夹 读取文件</span>
        fdata <span class="token operator">=</span> read_dir<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>
        upload_file<span class="token punctuation">(</span>fdata<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-效果展示" tabindex="-1"><a class="header-anchor" href="#_2-2-效果展示" aria-hidden="true">#</a> 2.2. 效果展示</h3><blockquote><p>这里是一些相关打印都 打印出来的情况。上面代码不包含这些print</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/JaikenWong/Drawing-Bed/images/2024-04-06/2cdc6118-f371-11ee-bf03-02d634b58295.png" alt="img"></p><h3 id="_2-3-配置在typora" tabindex="-1"><a class="header-anchor" href="#_2-3-配置在typora" aria-hidden="true">#</a> 2.3. 配置在Typora</h3><p><img src="https://cdn.jsdelivr.net/gh/JaikenWong/Drawing-Bed/images/2024-04-06/2cec70c6-f371-11ee-9247-02d634b58295.png" alt="img"></p><h3 id="_2-4-命令配置" tabindex="-1"><a class="header-anchor" href="#_2-4-命令配置" aria-hidden="true">#</a> 2.4. 命令配置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/Users/jaiken/miniconda3/bin/python  <span class="token parameter variable">-u</span> /Users/jaiken/workplace/pypro/learning/upload-img.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-5-验证测试" tabindex="-1"><a class="header-anchor" href="#_2-5-验证测试" aria-hidden="true">#</a> 2.5. 验证测试</h3><p><img src="https://cdn.jsdelivr.net/gh/JaikenWong/Drawing-Bed/images/2024-04-06/2d0a70c6-f371-11ee-90a5-02d634b58295.png" alt="img"></p>`,19),o=[p];function i(c,l){return s(),a("div",null,o)}const r=n(t,[["render",i],["__file","Githubtuchuang Python Typora.html.vue"]]);export{r as default};
